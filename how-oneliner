#!/bin/bash
set -e

# Parameters
MODEL="gpt-3.5-turbo"
TRANSLATION_MAX_TOKEN=1024
GENERATION_MAX_TOKEN=1024
GENERATION_TEMPERATURE=0.3
GENERATION_N=3

LOG_DIR="/tmp/how-oneliner"
LOG_FILE="${LOG_DIR}/response-$(date '+%Y%m%d').log"

show_help() {
    echo "Usage:"
    echo "  $ how-oneliner \"What you want to do in Any language\"."
    echo ""
    echo "Options:"
    echo "  -h: Show this help message"
    echo ""
    echo "Outputs:"
    echo "  Outputs up to 3 command candidates."
    echo ""
    echo "Requirement:"
    echo "  Set the OpenAPI secret key in the environment variable OAI_API_KEY."
    echo "  $ export OAI_API_KEY=xxxxxxx"
}

while getopts ":h" opt; do
    case ${opt} in
        h )
            show_help
            exit 0
            ;;
        \? )
            echo "Error: nvalid option: -$OPTARG" 1>&2
            show_help
            exit 1
            ;;
    esac
done

function check-and-init() {
    INPUT="$1"

    if [ -z "${OAI_API_KEY}" ]; then
	echo "Error: OAI_API_KEY is not set."
	exit 1
    fi

    if [ -z "${INPUT}" ]; then
	echo "Error: No input instruction."
	exit 1
    fi

    mkdir -p ${LOG_DIR}
}

function translate() {
    INST="$@"
    SYSTEM_MESSAGE="You are a translator that translates any language into English."
    QUERY="Output sentence according to the following rules.\n\
1. If the input is not in English, translate it into English. If the input is in English, proofread and output it.\n\
2. Put '###' at the beginning of the result of 1."
    ANSWER="OK. Please input a sentence."
    INPUT_JSON=$(cat << EOT
{
  "model": "${MODEL}",
  "messages": [
    {"role": "system",    "content": "${SYSTEM_MESSAGE}"},
    {"role": "user",      "content": "${QUERY}"},
    {"role": "assistant", "content": "${ANSWER}"},
    {"role": "user",      "content": "${INST}"}
  ],
  "temperature": 0,
  "n": 1,
  "max_tokens": ${TRANSLATION_MAX_TOKEN}
}
EOT
    )
    echo ${INPUT_JSON} >> ${LOG_FILE}
    INST_EN=$(curl https://api.openai.com/v1/chat/completions \
		   -s \
		   -H "Content-Type: application/json" \
		   -H "Authorization: Bearer ${OAI_API_KEY}" \
		   -d "${INPUT_JSON}" \
		  | tee -a ${LOG_FILE} \
		  | awk -F\" -v RS=, '/"content"/{print $4}' \
	          | grep '###' \
		  | sed 's/Output: //g' \
		  | sed 's/output: //g' \
		  | sed 's/###//g')

    if [ -z "${INST_EN}" ]; then
	echo "Translation of the instruction failed."
	echo "See ${LOG_FILE} for reason."
	exit 1
    fi
    # echo ${INST_EN}
}

function generate() {
    SYSTEM_MESSAGE="You are an assistant that generates commands that run on Linux bash shell."
    QUERY="Generate a command to execute the request according to the following rules\n\
- One line.\n\
- Executable on Linux bash.\n\
- Combine the commands that come standard with Linux whenever possible.\n\
- Start with \$.\n"
    ANSWER="OK. What do you want to do?"
    INPUT_JSON=$(cat << EOT
{
  "model": "${MODEL}",
  "messages": [
    {"role": "system",    "content": "${SYSTEM_MESSAGE}"},
    {"role": "user",      "content": "${QUERY}"},
    {"role": "assistant", "content": "${ANSWER}"},
    {"role": "user",      "content": "${INST_EN}"}
  ],
  "temperature": ${GENERATION_TEMPERATURE},
  "n": ${GENERATION_N},
  "max_tokens": ${GENERATION_MAX_TOKEN}
}
EOT
    )
    echo ${INPUT_JSON} >> ${LOG_FILE}
    COMMAND=$(curl https://api.openai.com/v1/chat/completions \
		   -s \
		   -H "Content-Type: application/json" \
		   -H "Authorization: Bearer ${OAI_API_KEY}" \
		   -d "${INPUT_JSON}" \
		  | tee -a ${LOG_FILE} \
		  | sed 's/"content":"/\n/g' \
		  | sed 's/"},"finish_reason"/\n/g' \
		  | sed 's/```\\n\$/\n$/g' \
		  | sed 's/\\n```/\n/g' \
		  | grep '^\$' \
		  | sort \
		  | uniq)

    if [ -z "${COMMAND}" ]; then
	echo "Command generation failed."
	echo "See ${LOG_FILE} for reason."
	exit 1
    fi

    echo "${COMMAND}" | sed 's/\\"/"/g'
}


### main
check-and-init "$@"
translate "$@"
generate

exit 0
